@model HotelReservationApp.Models.Reservation
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery Antiforgery
@{
    ViewData["Title"] = "Create Reservation";
}
@functions {
    public string GetAntiForgeryToken()
    {
        return Antiforgery.GetAndStoreTokens(Context).RequestToken;
    }
}

<div class="container-xxl py-5">
    <div class="container">
        <div class="text-center wow fadeInUp" data-wow-delay="0.1s">
            <h6 class="section-title text-center text-primary text-uppercase">Reservation</h6>
            <h1 class="mb-5">Create <span class="text-primary text-uppercase">Reservation</span></h1>
        </div>

        <div class="row g-4">
            <div class="col-lg-8">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Reservation Details</h5>
                    </div>
                    <div class="card-body">
                        <form action="/Reservation/Create" method="post">
                            <input type="hidden" name="__RequestVerificationToken" value="@GetAntiForgeryToken()" />
                            <input type="hidden" name="RoomID" value="@Model.RoomID" />
                            
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="CheckInDate" class="form-label">Check-in Date</label>
                                    <input type="date" id="CheckInDate" name="CheckInDate" class="form-control" 
                                           value="@Model.CheckInDate.ToString("yyyy-MM-dd")" 
                                           min="@DateTime.Today.ToString("yyyy-MM-dd")" required />
                                    <span class="text-danger field-validation-error" data-valmsg-for="CheckInDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <label for="CheckOutDate" class="form-label">Check-out Date</label>
                                    <input type="date" id="CheckOutDate" name="CheckOutDate" class="form-control" 
                                           value="@Model.CheckOutDate.ToString("yyyy-MM-dd")" 
                                           min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")" required />
                                    <span class="text-danger field-validation-error" data-valmsg-for="CheckOutDate"></span>
                                </div>
                                <div class="col-md-6">
                                    <label for="GuestCount" class="form-label">Number of Guests</label>
                                    <select id="GuestCount" name="GuestCount" class="form-select" required>
                                        @for (int i = 1; i <= 6; i++)
                                        {
                                            string text = i == 1 ? "1 Guest" : i + " Guests";
                                            if (Model.GuestCount == i)
                                            {
                                                <option value="@i" selected>@text</option>
                                            }
                                            else
                                            {
                                                <option value="@i">@text</option>
                                            }
                                        }
                                    </select>
                                    <span class="text-danger field-validation-error" data-valmsg-for="GuestCount"></span>
                                </div>
                                <div class="col-md-6">
                                    <label for="SpecialRequests" class="form-label">Special Requests</label>
                                    <textarea id="SpecialRequests" name="SpecialRequests" class="form-control" rows="3" 
                                              placeholder="Any special requests or notes...">@Model.SpecialRequests</textarea>
                                    <span class="text-danger field-validation-error" data-valmsg-for="SpecialRequests"></span>
                                </div>
                            </div>

                            <div class="text-danger validation-summary-errors mt-3"></div>

                            <div class="d-flex justify-content-between mt-4">
                                <a href="/Room" class="btn btn-secondary">
                                    <i class="fa fa-arrow-left me-2"></i>Back to Rooms
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fa fa-check me-2"></i>Create Reservation
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card shadow">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">Room Information</h5>
                    </div>
                    <div class="card-body">
                        @if (ViewBag.Room != null)
                        {
                            var room = ViewBag.Room as HotelReservationApp.Models.Room;
                            <div class="text-center mb-3">
                                @if (room.RoomImages != null && room.RoomImages.Any())
                                {
                                    <img src="@room.RoomImages.First().ImageUrl" class="img-fluid rounded" alt="@room.RoomType?.TypeName">
                                }
                                else
                                {
                                    <img src="~/img/room-1.jpg" class="img-fluid rounded" alt="@room.RoomType?.TypeName">
                                }
                            </div>
                            <h6 class="text-primary">@room.RoomType?.TypeName</h6>
                            <p class="mb-2"><strong>Hotel:</strong> @room.Hotel?.Name</p>
                            <p class="mb-2"><strong>Room Number:</strong> @room.RoomNumber</p>
                            <p class="mb-2"><strong>Capacity:</strong> @room.Capacity Persons</p>
                            <p class="mb-2"><strong>Price per Night:</strong> $@room.PricePerNight</p>
                            <hr>
                            <div class="d-flex justify-content-between">
                                <span><strong>Total Nights:</strong></span>
                                <span id="totalNights">1</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span><strong>Total Amount:</strong></span>
                                <span id="totalAmount" class="text-primary fw-bold">$@room.PricePerNight</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            const checkInInput = $('#CheckInDate');
            const checkOutInput = $('#CheckOutDate');
            const totalNightsSpan = $('#totalNights');
            const totalAmountSpan = $('#totalAmount');
            const pricePerNight = @(ViewBag.Room?.PricePerNight ?? 0);

            function updateTotal() {
                const checkIn = new Date(checkInInput.val());
                const checkOut = new Date(checkOutInput.val());
                
                if (checkIn && checkOut && checkOut > checkIn) {
                    const nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
                    const total = nights * pricePerNight;
                    
                    totalNightsSpan.text(nights);
                    totalAmountSpan.text('$' + total.toFixed(2));
                }
            }

            checkInInput.on('change', function() {
                const checkIn = new Date(this.value);
                const minCheckOut = new Date(checkIn);
                minCheckOut.setDate(minCheckOut.getDate() + 1);
                checkOutInput.attr('min', minCheckOut.toISOString().split('T')[0]);
                updateTotal();
            });

            checkOutInput.on('change', updateTotal);

            // Setup AJAX anti-forgery token
            $.ajaxSetup({
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            });

            // Form submit event listener
            $('form').on('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const jsonData = {};
                formData.forEach((value, key) => {
                    jsonData[key] = value;
                });

                $.ajax({
                    url: $(this).attr('action'),
                    method: 'POST',
                    data: JSON.stringify(jsonData),
                    contentType: 'application/json',
                    success: function(response) {
                        if (response.success) {
                            toastr.success('Rezervasyon başarıyla oluşturuldu.');
                            if (response.redirectTo) {
                                setTimeout(function() {
                                    window.location.href = response.redirectTo;
                                }, 1500);
                            }
                        } else {
                            toastr.error(response.message || 'Rezervasyon oluşturulurken bir hata oluştu.');
                        }
                    },
                    error: function(xhr) {
                        console.error('Rezervasyon oluşturma hatası:', xhr);
                        if (xhr.responseJSON && xhr.responseJSON.errors) {
                            Object.keys(xhr.responseJSON.errors).forEach(function(key) {
                                toastr.error(xhr.responseJSON.errors[key].join('\n'));
                            });
                        } else {
                            toastr.error('Rezervasyon oluşturulurken bir hata oluştu.');
                        }
                    }
                });
            });
        });
    </script>
}
